#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

### Notice of modifications in the code to comply with Apache License, Version 2.0
## Change target robot from Turtlebot3 to GoPiGo3
## Author: brjapon@therobotacademy.com

import rospy
import os
import json
import numpy as np
import random
import time
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray
from src.gopigo3_dqn.environment_stage_1 import Env
from keras.models import Sequential, load_model
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Activation


EPISODES = 3000

 #Reinforcement learning network
class ReinforceAgent():
    #Initialization function
    def __init__(self, state_size, action_size):
        # Create result topic
        self.pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
        # Get the full path of the current file
        self.dirPath = os.path.dirname(os.path.realpath(__file__))
        # Save path prefix based on current path generation model
        self.dirPath = self.dirPath.replace('gopigo3_dqn/nodes', 'gopigo3_dqn/save_model/stage_1_')
        # Initialize result topic
        self.result = Float32MultiArray()

#       Assuming there is no previous model
#        self.load_model = False
#        self.load_episode = 0

        # Load model from last EPISODE
        self.load_model = True # If 'False', start from scratch
        self.load_episode = 420 # If 'True' start from this episode number 'self.load_episode'
        # ----------------------------

        #Number of states
        self.state_size = state_size
        #Action number
        self.action_size = action_size
        # Maximum number of steps in an episode
        self.episode_step = 6000
        # Update target network parameters every 2000 times
        self.target_update = 2000
        # Discount factor is used when calculating reward. The most important feedback is the longer the time, the smaller the impact.
        self.discount_factor = 0.99
         # The learning rate determines how fast the parameter moves to the optimal value.
         # If the learning rate is too large, it is likely to exceed the optimal value; on the contrary, if the learning rate is too small, the optimization efficiency may be too low, and the algorithm cannot converge for a long time.
        self.learning_rate = 0.00025
        # Initial ϵ——epsilon
        # Exploration and utilization principles
        # Exploration emphasizes the discovery of more information in the environment and is not limited to known information;
        # Use emphasis to maximize rewards from known information;
        # The greedy strategy only focuses on the latter, not the former;
        # ϵ-greedy strategy has both exploration and utilization. It randomly selects one of all actions with a probability of ϵ, and extracts the action that can maximize the reward with a probability of 1−ϵ.
        self.epsilon = 1.0
        #As the model is trained, epsilon should gradually decay
        self.epsilon_decay = 0.99
        #Minimum epsilon_min
        self.epsilon_min = 0.05
        self.batch_size = 64
        # Agent.memory for experience replay
        # DQN's experience playback pool (agent.memory) is greater than train_start before starting to train the network (agent.trainModel)        
        self.train_start = 64
        # Use the queue to store experience replay data and set the maximum length of the queue
        self.memory = deque(maxlen=1000000)
        # Network model building
        self.model = self.buildModel()
        #targetNetwork build
        self.target_model = self.buildModel()

        self.updateTargetModel()
        # Training can be carried out by loading the previously saved model parameters
        if self.load_model:
            self.model.set_weights(load_model(self.dirPath+str(self.load_episode)+".h5").get_weights())

            with open(self.dirPath+str(self.load_episode)+'.json') as outfile:
                param = json.load(outfile)
                self.epsilon = param.get('epsilon')
    
    # Network model building
    def buildModel(self):
        # Sequential sequence model is a linear hierarchical stack
        model = Sequential()
        # Set dropout (Regularization techniques for deep neural networks) to prevent overfitting
        dropout = 0.2
        # Add a fully connected layer, the input size is input_shape = (self.state_size,), 
        # the output size is 64, the activation function is relu, 
        # and the weight initialization method is lecun_uniform
        model.add(Dense(64, input_shape=(self.state_size,), activation='relu', kernel_initializer='lecun_uniform'))
        model.add(Dense(64, activation='relu', kernel_initializer='lecun_uniform'))
        model.add(Dropout(dropout))
         # Add a fully connected layer, the output size is action_size, the weight initialization method is lecun_uniform
        model.add(Dense(self.action_size, kernel_initializer='lecun_uniform'))
        # Add a linear activation layer
        model.add(Activation('linear'))
        # Optimization algorithm RMSprop
        # rho = 0.9 is the attenuation coefficient, epsilon = 1e-06 is a small constant to ensure the stability of division by decimals
        model.compile(loss='mse', optimizer=RMSprop(lr=self.learning_rate, rho=0.9, epsilon=1e-06))
        # print out the model overview
        model.summary()
        return model

    # Calculate the Q value, use reward (current env feedback), and next_target calculated by taget_net network
    def getQvalue(self, reward, next_target, done):
        if done:
            return reward
        else:
            return reward + self.discount_factor * np.amax(next_target)

    # Copies the Q Network weights to the Target Network
    def updateTargetModel(self):
        self.target_model.set_weights(self.model.get_weights())
 
    # Use ϵ-epsilon for selecting an action 
    def getAction(self, state):
        if np.random.rand() <= self.epsilon:
            self.q_value = np.zeros(self.action_size)
            return random.randrange(self.action_size)
        else:
            q_value = self.model.predict(state.reshape(1, len(state)))
            self.q_value = q_value
            return np.argmax(q_value[0])

    # Storing the experience in the experience replay queue: state, action, reward and the next_state
    def appendMemory(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    # Train network model
    #### .trainModel() loops '.batch_size = 64' times
    def trainModel(self, target=False):
        mini_batch = random.sample(self.memory, self.batch_size)
        X_batch = np.empty((0, self.state_size), dtype=np.float64)
        Y_batch = np.empty((0, self.action_size), dtype=np.float64)

        for i in range(self.batch_size):
            states = mini_batch[i][0]
            actions = mini_batch[i][1]
            rewards = mini_batch[i][2]
            next_states = mini_batch[i][3]
            dones = mini_batch[i][4]
            # Calculate q_value
            q_value = self.model.predict(states.reshape(1, len(states)))
            self.q_value = q_value
            #Calculate next_target
            if target:
                next_target = self.target_model.predict(next_states.reshape(1, len(next_states)))

            else:
                next_target = self.model.predict(next_states.reshape(1, len(next_states)))

            # Calculate next_q_value
            next_q_value = self.getQvalue(rewards, next_target, dones)

            X_batch = np.append(X_batch, np.array([states.copy()]), axis=0)
            Y_sample = q_value.copy()

            Y_sample[0][actions] = next_q_value
            Y_batch = np.append(Y_batch, np.array([Y_sample[0]]), axis=0)

            if dones:
                X_batch = np.append(X_batch, np.array([next_states.copy()]), axis=0)
                Y_batch = np.append(Y_batch, np.array([[rewards] * self.action_size]), axis=0)

        self.model.fit(X_batch, Y_batch, batch_size=self.batch_size, epochs=1, verbose=0)

if __name__ == '__main__':
    rospy.init_node('gopigo3_dqn_stage_1')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 26
    action_size = 5

    env = Env(action_size)

    agent = ReinforceAgent(state_size, action_size)
    scores, episodes = [], []
    global_step = 0
    start_time = time.time()

    rospy.loginfo("+++++++++++++++++++++++++++++++++++++++++++++++++++++")

    if agent.load_model:
        rospy.loginfo("START TRAINING MODEL FROM episode = %d", agent.load_episode)
    else:
        rospy.loginfo("START TRAINING MODEL FROM scratch") 
    
    rospy.loginfo("=====================================================")
    
    # Run number of 'EPISODES = 3000'
    # 'global_step' resets to 0 for every new EPISODE

    # Determine the number of the starting episode
    if agent.load_model == False:
        load_episode = 0
    else:
        load_episode = agent.load_episode
    
    # Run every new episode
    for e in range(agent.load_episode + 1, EPISODES):
        done = False
        state = env.reset()
        score = 0
        # Loop t over a maximum of '.episode_step = 6000'
        #    if t >= 500 => it causes a rospy.loginfo("Time out!!")
        for t in range(agent.episode_step):
            action = agent.getAction(state)

            next_state, reward, done = env.step(action)

            agent.appendMemory(state, action, reward, next_state, done)


            if len(agent.memory) >= agent.train_start:
                # global_step  <=,else  (.target_update = 2000)
                if global_step <= agent.target_update:
                    # Prediction using '.target_model'
                    agent.trainModel()
                else:
                    # Prediction using  '.model'
                    agent.trainModel(True)

            score += reward
            state = next_state
            get_action.data = [action, score, reward]
            pub_get_action.publish(get_action)
            
            # Save the network model parameters every 10 rounds
            if e % 10 == 0:
                agent.model.save(agent.dirPath + str(e) + '.h5')
                with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
                    json.dump(param_dictionary, outfile)

            # Set to timeout when more than 500 steps, end of round
            if t >= 500:
                rospy.loginfo("Time out!!")
                done = True

            if done:
                
                # Post result topic
                result.data = [score, np.max(agent.q_value)]
                pub_result.publish(result)
                agent.updateTargetModel()
                scores.append(score)
                episodes.append(e)
                m, s = divmod(int(time.time() - start_time), 60)
                h, m = divmod(m, 60)

                rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
                              e, score, len(agent.memory), agent.epsilon, h, m, s)
                param_keys = ['epsilon']
                param_values = [agent.epsilon]
                param_dictionary = dict(zip(param_keys, param_values))
                break

            global_step += 1
            # Update the target network parameters every time after agent.target_update
            if global_step % agent.target_update == 0:
                rospy.loginfo("UPDATE TARGET NETWORK")
        # Update the attenuation epsilon value until it is lower than or equal to agent.epsilon_min
        if agent.epsilon > agent.epsilon_min:
            agent.epsilon *= agent.epsilon_decay