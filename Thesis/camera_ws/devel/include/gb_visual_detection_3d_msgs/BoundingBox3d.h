// Generated by gencpp from file gb_visual_detection_3d_msgs/BoundingBox3d.msg
// DO NOT EDIT!


#ifndef GB_VISUAL_DETECTION_3D_MSGS_MESSAGE_BOUNDINGBOX3D_H
#define GB_VISUAL_DETECTION_3D_MSGS_MESSAGE_BOUNDINGBOX3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gb_visual_detection_3d_msgs
{
template <class ContainerAllocator>
struct BoundingBox3d_
{
  typedef BoundingBox3d_<ContainerAllocator> Type;

  BoundingBox3d_()
    : Class()
    , probability(0.0)
    , xmin(0.0)
    , ymin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , zmin(0.0)
    , zmax(0.0)
    , xmin_2d(0)
    , ymin_2d(0)
    , xmax_2d(0)
    , ymax_2d(0)  {
    }
  BoundingBox3d_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , probability(0.0)
    , xmin(0.0)
    , ymin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , zmin(0.0)
    , zmax(0.0)
    , xmin_2d(0)
    , ymin_2d(0)
    , xmax_2d(0)
    , ymax_2d(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  _Class_type Class;

   typedef double _probability_type;
  _probability_type probability;

   typedef double _xmin_type;
  _xmin_type xmin;

   typedef double _ymin_type;
  _ymin_type ymin;

   typedef double _xmax_type;
  _xmax_type xmax;

   typedef double _ymax_type;
  _ymax_type ymax;

   typedef double _zmin_type;
  _zmin_type zmin;

   typedef double _zmax_type;
  _zmax_type zmax;

   typedef int64_t _xmin_2d_type;
  _xmin_2d_type xmin_2d;

   typedef int64_t _ymin_2d_type;
  _ymin_2d_type ymin_2d;

   typedef int64_t _xmax_2d_type;
  _xmax_2d_type xmax_2d;

   typedef int64_t _ymax_2d_type;
  _ymax_2d_type ymax_2d;





  typedef boost::shared_ptr< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox3d_

typedef ::gb_visual_detection_3d_msgs::BoundingBox3d_<std::allocator<void> > BoundingBox3d;

typedef boost::shared_ptr< ::gb_visual_detection_3d_msgs::BoundingBox3d > BoundingBox3dPtr;
typedef boost::shared_ptr< ::gb_visual_detection_3d_msgs::BoundingBox3d const> BoundingBox3dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator1> & lhs, const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.probability == rhs.probability &&
    lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.zmin == rhs.zmin &&
    lhs.zmax == rhs.zmax &&
    lhs.xmin_2d == rhs.xmin_2d &&
    lhs.ymin_2d == rhs.ymin_2d &&
    lhs.xmax_2d == rhs.xmax_2d &&
    lhs.ymax_2d == rhs.ymax_2d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator1> & lhs, const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gb_visual_detection_3d_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ce9b0738c577c56440a33d88e32daf4";
  }

  static const char* value(const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ce9b0738c577c56ULL;
  static const uint64_t static_value2 = 0x440a33d88e32daf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gb_visual_detection_3d_msgs/BoundingBox3d";
  }

  static const char* value(const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Class\n"
"float64 probability\n"
"float64 xmin\n"
"float64 ymin\n"
"float64 xmax\n"
"float64 ymax\n"
"float64 zmin\n"
"float64 zmax\n"
"int64 xmin_2d\n"
"int64 ymin_2d\n"
"int64 xmax_2d\n"
"int64 ymax_2d\n"
;
  }

  static const char* value(const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.probability);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.zmin);
      stream.next(m.zmax);
      stream.next(m.xmin_2d);
      stream.next(m.ymin_2d);
      stream.next(m.xmax_2d);
      stream.next(m.ymax_2d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox3d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gb_visual_detection_3d_msgs::BoundingBox3d_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "xmin: ";
    Printer<double>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<double>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<double>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<double>::stream(s, indent + "  ", v.ymax);
    s << indent << "zmin: ";
    Printer<double>::stream(s, indent + "  ", v.zmin);
    s << indent << "zmax: ";
    Printer<double>::stream(s, indent + "  ", v.zmax);
    s << indent << "xmin_2d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmin_2d);
    s << indent << "ymin_2d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymin_2d);
    s << indent << "xmax_2d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmax_2d);
    s << indent << "ymax_2d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymax_2d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GB_VISUAL_DETECTION_3D_MSGS_MESSAGE_BOUNDINGBOX3D_H
